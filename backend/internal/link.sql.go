// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: link.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createLink = `-- name: CreateLink :one
INSERT INTO links (
    user_id,
    title,
    url,
    description,
    domain,
    favicon_url,
    is_favorite,
    archived
) VALUES (
    $1, $2, $3, $4, $5, $6, $7, $8
) RETURNING id, user_id, title, url, description, domain, favicon_url, is_favorite, archived, created_at, updated_at
`

type CreateLinkParams struct {
	UserID      pgtype.UUID `json:"user_id"`
	Title       string      `json:"title"`
	Url         string      `json:"url"`
	Description pgtype.Text `json:"description"`
	Domain      pgtype.Text `json:"domain"`
	FaviconUrl  pgtype.Text `json:"favicon_url"`
	IsFavorite  pgtype.Bool `json:"is_favorite"`
	Archived    pgtype.Bool `json:"archived"`
}

func (q *Queries) CreateLink(ctx context.Context, arg CreateLinkParams) (Link, error) {
	row := q.db.QueryRow(ctx, createLink,
		arg.UserID,
		arg.Title,
		arg.Url,
		arg.Description,
		arg.Domain,
		arg.FaviconUrl,
		arg.IsFavorite,
		arg.Archived,
	)
	var i Link
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Title,
		&i.Url,
		&i.Description,
		&i.Domain,
		&i.FaviconUrl,
		&i.IsFavorite,
		&i.Archived,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteLink = `-- name: DeleteLink :exec
DELETE FROM links
WHERE id = $1 AND user_id = $2
`

type DeleteLinkParams struct {
	ID     pgtype.UUID `json:"id"`
	UserID pgtype.UUID `json:"user_id"`
}

func (q *Queries) DeleteLink(ctx context.Context, arg DeleteLinkParams) error {
	_, err := q.db.Exec(ctx, deleteLink, arg.ID, arg.UserID)
	return err
}

const getLinkByID = `-- name: GetLinkByID :one
SELECT id, user_id, title, url, description, domain, favicon_url, is_favorite, archived, created_at, updated_at FROM links
WHERE id = $1 AND user_id = $2
`

type GetLinkByIDParams struct {
	ID     pgtype.UUID `json:"id"`
	UserID pgtype.UUID `json:"user_id"`
}

func (q *Queries) GetLinkByID(ctx context.Context, arg GetLinkByIDParams) (Link, error) {
	row := q.db.QueryRow(ctx, getLinkByID, arg.ID, arg.UserID)
	var i Link
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Title,
		&i.Url,
		&i.Description,
		&i.Domain,
		&i.FaviconUrl,
		&i.IsFavorite,
		&i.Archived,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listArchivedLinksByUser = `-- name: ListArchivedLinksByUser :many
SELECT id, user_id, title, url, description, domain, favicon_url, is_favorite, archived, created_at, updated_at FROM links
WHERE user_id = $1 AND archived = TRUE
ORDER BY created_at DESC
LIMIT $2 OFFSET $3
`

type ListArchivedLinksByUserParams struct {
	UserID pgtype.UUID `json:"user_id"`
	Limit  int32       `json:"limit"`
	Offset int32       `json:"offset"`
}

func (q *Queries) ListArchivedLinksByUser(ctx context.Context, arg ListArchivedLinksByUserParams) ([]Link, error) {
	rows, err := q.db.Query(ctx, listArchivedLinksByUser, arg.UserID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Link{}
	for rows.Next() {
		var i Link
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Title,
			&i.Url,
			&i.Description,
			&i.Domain,
			&i.FaviconUrl,
			&i.IsFavorite,
			&i.Archived,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listFavoriteLinksByUser = `-- name: ListFavoriteLinksByUser :many
SELECT id, user_id, title, url, description, domain, favicon_url, is_favorite, archived, created_at, updated_at FROM links
WHERE user_id = $1 AND is_favorite = TRUE AND archived = FALSE
ORDER BY created_at DESC
LIMIT $2 OFFSET $3
`

type ListFavoriteLinksByUserParams struct {
	UserID pgtype.UUID `json:"user_id"`
	Limit  int32       `json:"limit"`
	Offset int32       `json:"offset"`
}

func (q *Queries) ListFavoriteLinksByUser(ctx context.Context, arg ListFavoriteLinksByUserParams) ([]Link, error) {
	rows, err := q.db.Query(ctx, listFavoriteLinksByUser, arg.UserID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Link{}
	for rows.Next() {
		var i Link
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Title,
			&i.Url,
			&i.Description,
			&i.Domain,
			&i.FaviconUrl,
			&i.IsFavorite,
			&i.Archived,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listLinksByUser = `-- name: ListLinksByUser :many
SELECT id, user_id, title, url, description, domain, favicon_url, is_favorite, archived, created_at, updated_at FROM links
WHERE user_id = $1
ORDER BY created_at DESC
LIMIT $2 OFFSET $3
`

type ListLinksByUserParams struct {
	UserID pgtype.UUID `json:"user_id"`
	Limit  int32       `json:"limit"`
	Offset int32       `json:"offset"`
}

func (q *Queries) ListLinksByUser(ctx context.Context, arg ListLinksByUserParams) ([]Link, error) {
	rows, err := q.db.Query(ctx, listLinksByUser, arg.UserID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Link{}
	for rows.Next() {
		var i Link
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Title,
			&i.Url,
			&i.Description,
			&i.Domain,
			&i.FaviconUrl,
			&i.IsFavorite,
			&i.Archived,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateLink = `-- name: UpdateLink :one
UPDATE links
SET
    title = COALESCE($1, title),
    url = COALESCE($2, url),
    description = COALESCE($3, description),
    domain = COALESCE($4, domain),
    favicon_url = COALESCE($5, favicon_url),
    is_favorite = COALESCE($6, is_favorite),
    archived = COALESCE($7, archived),
    updated_at = NOW()
WHERE id = $8 AND user_id = $9
RETURNING id, user_id, title, url, description, domain, favicon_url, is_favorite, archived, created_at, updated_at
`

type UpdateLinkParams struct {
	Title       pgtype.Text `json:"title"`
	Url         pgtype.Text `json:"url"`
	Description pgtype.Text `json:"description"`
	Domain      pgtype.Text `json:"domain"`
	FaviconUrl  pgtype.Text `json:"favicon_url"`
	IsFavorite  pgtype.Bool `json:"is_favorite"`
	Archived    pgtype.Bool `json:"archived"`
	ID          pgtype.UUID `json:"id"`
	UserID      pgtype.UUID `json:"user_id"`
}

func (q *Queries) UpdateLink(ctx context.Context, arg UpdateLinkParams) (Link, error) {
	row := q.db.QueryRow(ctx, updateLink,
		arg.Title,
		arg.Url,
		arg.Description,
		arg.Domain,
		arg.FaviconUrl,
		arg.IsFavorite,
		arg.Archived,
		arg.ID,
		arg.UserID,
	)
	var i Link
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Title,
		&i.Url,
		&i.Description,
		&i.Domain,
		&i.FaviconUrl,
		&i.IsFavorite,
		&i.Archived,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

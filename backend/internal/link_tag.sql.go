// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: link_tag.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const addTagToLink = `-- name: AddTagToLink :exec
INSERT INTO link_tags (
    link_id,
    tag_id
) VALUES (
    $1, $2
) ON CONFLICT (link_id, tag_id) DO NOTHING
`

type AddTagToLinkParams struct {
	LinkID pgtype.UUID `json:"link_id"`
	TagID  pgtype.UUID `json:"tag_id"`
}

func (q *Queries) AddTagToLink(ctx context.Context, arg AddTagToLinkParams) error {
	_, err := q.db.Exec(ctx, addTagToLink, arg.LinkID, arg.TagID)
	return err
}

const listLinksByTag = `-- name: ListLinksByTag :many
SELECT l.id, l.user_id, l.title, l.url, l.description, l.domain, l.favicon_url, l.is_favorite, l.archived, l.created_at, l.updated_at FROM links l
JOIN link_tags lt ON l.id = lt.link_id
WHERE lt.tag_id = $1 AND l.user_id = $2 AND l.archived = FALSE
ORDER BY l.created_at DESC
LIMIT $3 OFFSET $4
`

type ListLinksByTagParams struct {
	TagID  pgtype.UUID `json:"tag_id"`
	UserID pgtype.UUID `json:"user_id"`
	Limit  int32       `json:"limit"`
	Offset int32       `json:"offset"`
}

func (q *Queries) ListLinksByTag(ctx context.Context, arg ListLinksByTagParams) ([]Link, error) {
	rows, err := q.db.Query(ctx, listLinksByTag,
		arg.TagID,
		arg.UserID,
		arg.Limit,
		arg.Offset,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Link{}
	for rows.Next() {
		var i Link
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Title,
			&i.Url,
			&i.Description,
			&i.Domain,
			&i.FaviconUrl,
			&i.IsFavorite,
			&i.Archived,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listTagsByLink = `-- name: ListTagsByLink :many
SELECT t.id, t.user_id, t.name, t.created_at FROM tags t
JOIN link_tags lt ON t.id = lt.tag_id
WHERE lt.link_id = $1
ORDER BY t.name
`

func (q *Queries) ListTagsByLink(ctx context.Context, linkID pgtype.UUID) ([]Tag, error) {
	rows, err := q.db.Query(ctx, listTagsByLink, linkID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Tag{}
	for rows.Next() {
		var i Tag
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Name,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const removeTagFromLink = `-- name: RemoveTagFromLink :exec
DELETE FROM link_tags
WHERE link_id = $1 AND tag_id = $2
`

type RemoveTagFromLinkParams struct {
	LinkID pgtype.UUID `json:"link_id"`
	TagID  pgtype.UUID `json:"tag_id"`
}

func (q *Queries) RemoveTagFromLink(ctx context.Context, arg RemoveTagFromLinkParams) error {
	_, err := q.db.Exec(ctx, removeTagFromLink, arg.LinkID, arg.TagID)
	return err
}
